/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package livestreamer.gui;

import java.awt.List;
import java.awt.event.ItemEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Fanciu
 */
public class MainInterface extends javax.swing.JFrame {

    private JFrame frame;

    /**
     * Creates new form MainInterface
     */
    public MainInterface() {

        initComponents();
        setIconImage(new ImageIcon(getClass().getResource(Variables.appIcon)).getImage());
        updateComboBox2(jComboBox1.getSelectedItem().toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        OnlineOffline = new javax.swing.JLabel();
        AddNewStream = new javax.swing.JButton();
        RemoveStream = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        EditButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Gautami", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Livestreamer interface");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(ListForComboBox1()));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Connect!");
        jButton1.setFocusPainted(false);
        jButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton1.setMaximumSize(new java.awt.Dimension(61, 39));
        jButton1.setMinimumSize(new java.awt.Dimension(61, 39));
        jButton1.setPreferredSize(new java.awt.Dimension(61, 39));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        OnlineOffline.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OnlineOffline.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livestreamer/gui/Image/network_connected.png"))); // NOI18N
        OnlineOffline.setToolTipText("Online / Offline Indicator");
        OnlineOffline.setFocusable(false);
        OnlineOffline.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        OnlineOffline.setMaximumSize(new java.awt.Dimension(90, 44));
        OnlineOffline.setMinimumSize(new java.awt.Dimension(90, 44));
        OnlineOffline.setPreferredSize(new java.awt.Dimension(90, 44));

        AddNewStream.setBackground(new java.awt.Color(255, 255, 255));
        AddNewStream.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livestreamer/gui/Image/add.png"))); // NOI18N
        AddNewStream.setFocusPainted(false);
        AddNewStream.setMargin(new java.awt.Insets(0, 0, 0, 0));
        AddNewStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewStreamActionPerformed(evt);
            }
        });

        RemoveStream.setBackground(new java.awt.Color(255, 255, 255));
        RemoveStream.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livestreamer/gui/Image/trash_recyclebin_empty_closed.png"))); // NOI18N
        RemoveStream.setFocusPainted(false);
        RemoveStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveStreamActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Select the Stream:");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Select the Quality:");

        EditButton.setBackground(new java.awt.Color(255, 255, 255));
        EditButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livestreamer/gui/Image/gear.png"))); // NOI18N
        EditButton.setFocusPainted(false);
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livestreamer/gui/Image/uuu.png"))); // NOI18N
        jButton3.setDefaultCapable(false);
        jButton3.setFocusPainted(false);
        jButton3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton3.setMaximumSize(new java.awt.Dimension(61, 39));
        jButton3.setMinimumSize(new java.awt.Dimension(61, 39));
        jButton3.setPreferredSize(new java.awt.Dimension(61, 39));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OnlineOffline, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(AddNewStream, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(RemoveStream, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(EditButton, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RemoveStream, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddNewStream, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EditButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OnlineOffline, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String caster = "", url = "", quality = "";
        caster = jComboBox1.getSelectedItem().toString();
        quality = jComboBox2.getSelectedItem().toString();
        if (quality.equals("Offline")) {
            JOptionPane optionPane = new JOptionPane("The stream is offline.", JOptionPane.ERROR_MESSAGE);
            JDialog dialog = optionPane.createDialog("Error");
            dialog.setAlwaysOnTop(true);
            dialog.setVisible(true);

        } else {
            for (int i = 0; i < Variables.listOfData.size(); i++) {
                if (Variables.listOfData.get(i).alias.equals(caster)) {
                    url = Variables.listOfData.get(i).url.toString();
                }
            }
            launchLivestreamer(url, quality);

        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {

            updateComboBox2(jComboBox1.getSelectedItem().toString());
        } else {

        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void AddNewStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewStreamActionPerformed

        InsertStream f = new InsertStream(this.frame);

        f.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                System.out.print(e.paramString());
                updateComboBox1();
            }
        });
        f.setVisible(true);
    }//GEN-LAST:event_AddNewStreamActionPerformed

    private void RemoveStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveStreamActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(this, "Do you want to remove this stream?", "Are you sure?", dialogButton);
        if (dialogResult == 0) {
            removeRecordFromStreamList(jComboBox1.getSelectedItem().toString());
        } else {
            System.out.println("No Option");
        }
    }//GEN-LAST:event_RemoveStreamActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed

  Config f = new Config(this.frame);
 
        f.setVisible(true);
    }//GEN-LAST:event_EditButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      Info f = new Info();
      f.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new MainInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNewStream;
    private javax.swing.JButton EditButton;
    private javax.swing.JLabel OnlineOffline;
    private javax.swing.JButton RemoveStream;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    private void updateComboBox1() {
        jComboBox1.removeAllItems();
        for (int i = 0; i < Variables.listOfData.size(); i++) {
            String alias, url;
            alias = Variables.listOfData.get(i).getAlias();
            jComboBox1.addItem(alias);
        }
    }

    private String[] ListForComboBox1() {
        ArrayList<String> myArrayList = new ArrayList<String>();
        String alias;
        for (int i = 0; i < Variables.listOfData.size(); i++) {

            alias = Variables.listOfData.get(i).getAlias();
            myArrayList.add(alias);
        }
        String[] myArray = myArrayList.toArray(new String[myArrayList.size()]);
        return myArray;
    }

    private void updateComboBox2(String comboBox1Item) {
        checkIfOnline(comboBox1Item);
        int index = 0;
        String alias;
        jComboBox2.removeAllItems();
        System.out.println(comboBox1Item);
        for (int i = 0; i < Variables.listOfData.size(); i++) {

            if (Variables.listOfData.get(i).alias.toString().equals(comboBox1Item)) {
                for (int j = 0; j < Variables.listOfData.get(i).listOfQuality.size(); j++) {
                    alias = Variables.listOfData.get(i).listOfQuality.get(j);
                    if (alias.toString().trim().equals("null")) {
                        alias = "Offline";
                    }
                    jComboBox2.addItem(alias);
                }

            }
        }

    }

    private void checkIfOnline(String comboBox1Item) {
        String url = "";
        
        int numberOfAlias = 0;
        for (int i = 0; i < Variables.listOfData.size(); i++) {
            if (Variables.listOfData.get(i).alias.equals(comboBox1Item)) {
                url = Variables.listOfData.get(i).url;
                numberOfAlias = i;
            }
        }
        String command = "livestreamer " + url;
        String commandOutput = "";
        System.out.println(command);

        try {
            int g = 0;
            String line;
            Process p = Runtime.getRuntime().exec("cmd /c " + command);
            BufferedReader bri = new BufferedReader(new InputStreamReader(p.getInputStream()));
            BufferedReader bre = new BufferedReader(new InputStreamReader(p.getErrorStream()));
            while ((line = bri.readLine()) != null) {
                System.out.println(line);
                if (g == 1) {
                    commandOutput = line;
                }
                g++;

            }
            bri.close();
            while ((line = bre.readLine()) != null) {
                System.out.println(line);
            }
            bre.close();
            p.waitFor();
        } catch (Exception err) {
            err.printStackTrace();
        }
    
        String check = "error:";
        if (commandOutput.trim().equals("")) {
            commandOutput = "error:";
        }
        check = commandOutput.substring(0, 5);
        System.out.println(check);
        if (check.equals(Variables.error)) {
            Variables.listOfData.get(numberOfAlias).listOfQuality.clear();
            Variables.listOfData.get(numberOfAlias).listOfQuality.add("null");
            ImageIcon imgThisImg = new ImageIcon(getClass().getResource(Variables.disconnectedIcon));
            OnlineOffline.setIcon(imgThisImg);

        } else {
            String[] plc = commandOutput.split(":");
            String[] plc2 = plc[1].trim().split(",");
            Variables.listOfData.get(numberOfAlias).listOfQuality.clear();
            for (int i = 0; i < plc2.length; i++) {
                Variables.listOfData.get(numberOfAlias).listOfQuality.add(plc2[i]);
            }
            ImageIcon imgThisImg = new ImageIcon(getClass().getResource(Variables.connectedIcon));
            OnlineOffline.setIcon(imgThisImg);
        }

      rewriteCfg();

    }

    private void launchLivestreamer(String url, String quality) {
        String[] placeholder = quality.trim().split(" ");
        quality = placeholder[0];
        System.out.print(" " + quality);
        try {
            Process exec = Runtime.getRuntime().exec("cmd /c livestreamer " + url + " " + quality);
        } catch (IOException ex) {
            Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removeRecordFromStreamList(String alias) {
        if(alias!=null){
        for (int i = 0; i < Variables.listOfData.size(); i++) {
            if (Variables.listOfData.get(i).alias.equals(alias)) {
                Variables.listOfData.remove(i);
            }
        }
        rewriteCfg();
        updateComboBox1();
        }
    }

    private void rewriteCfg() {
        BufferedWriter writer = null;
        String lineToWrite;
        String listOfQuality = "";
        try {
            writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(Variables.streamSaveOnCfg), "utf-8"));
            for (int i = 0; i < Variables.listOfData.size(); i++) {
                for (int j = 0; j < Variables.listOfData.get(i).listOfQuality.size(); j++) {
                    if (j == 0) {
                        listOfQuality = Variables.listOfData.get(i).listOfQuality.get(j).toString();
                    } else {
                        listOfQuality = listOfQuality + "," + Variables.listOfData.get(i).listOfQuality.get(j).toString();
                    }
                }
                if (listOfQuality.trim().equals("")) {
                    lineToWrite = Variables.listOfData.get(i).alias + ";" + Variables.listOfData.get(i).url + ";" + "null";
                } else {
                    lineToWrite = Variables.listOfData.get(i).alias + ";" + Variables.listOfData.get(i).url + ";" + listOfQuality;
                }
                writer.write(lineToWrite);
                writer.newLine();
                listOfQuality = "";
            }

        } catch (IOException ex) {
            // report
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
            }
        }

    }
}
